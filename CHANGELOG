-- ASSIGNMENT 1.1 --
2/3:
    9a:  Created project structure and makefile.
         Created some function signatures.
         Created an empty dungeon grid.
    10p: Added random room generation.
2/4:
    6p: Added walkways between rooms.
    8p: Added up/down staircases.
2/5:
    5p: Refactored dungeon into a dynamically-allocated data structure,
         containing width/height, room data, and cells.
        Also changed cells from a char into a struct with a type enum
         and hardness.
        Created dungeon_init and dungeon_destroy for allocation, tested
         for leaks with valgrind, and changed all methods to use this new
         structure.
        Added a random room count between pre-defined bounds. Extra rooms
         above the minimum, 6, may be added (if possible & chosen).
        Updated Makefile to compile files individually.
        Added immutable flag, and set it on the outside of the dungeon.

-- ASSIGNMENT 1.2 --
2/6:
    1p:  Created files and basic layout for I/O and new main method
         Wrote logic for reading command-line flags
         Added extra flag, -p, for a custom path
2/10:
    9p:  Created macros for READ_UINT<size> to simplify code.
         Completed and tested loading functionality against sample files.
         Created a header file for general macros, macros.h.
         Added structure to main() to write files (although it currently
            returns an error code since it's unimplemented).
         Added a debug logging flag, -d/--debug.
2/11:
    4p:  Created macros for WRITE_UINT<size>.
         Completed dungeon save function.
         Adjusted dungeon struct to use proper int sizes, uint<8/16>_t.
2/12:
    5p:  Added a seeded, diffused, and smoothed hardness value for stone.
          Adjusted generator functions to deal with that accordingly.
         Added a feature to the debug flag that writes cell hardness to
          dungeon.pgm for viewing.
         Fixed a bug in the load function which lost the PC location after
          several load/saves.
         Fixed a bug that prevented both --load/--save at once.

-- ASSIGNMENT 1.03 --
2/18:
    11p: Created structure (header files, source files, submission format)
          for Assignment 1.03. Wrote out heap function signatures and struct.
2/24:
    12p: Wrote out a heap structure and tested it against some simple code.
2/26:
    1p:  Updated the dungeon struct to include the two pathfinding maps.
         Wrote a Dijkstra's implementation to fill both maps.
         Updated main function to print the two additional maps, and removed
          the -b/--border flag (not useful anymore).
         Fixed a bug in the heap implementation where the remove function
          used the incorrect l/r child indices.
         Fixed a bug in the heap implementation where removed nodes were
          not free'd, causing a memory leak.
         Tested all of the sample saved dungeons against the program's output
          using a script -- all match.

-- ASSIGNMENT 1.04 --
2/27:
    12p: Created make target and general structure for Assignment 1.04.
         Created "character.c/character.h" for characters and monsters.
3/3:
    9a:  Refactored dungeon code to use the new character structure for the PC.
         Added a character map.
3/4:
    3p:  Added functions to character.c to generate and destroy monsters.
         Added functions to character.c to generate an approximate line between
          two points and check if there is line of sight (no stone) between
          those points. Also added a function to get the next coordinate along
          that line.
3/5
    11p: Wrote the logic for moving monsters around the game screen w/ lots of
          debugging.
         Discovered a bug in the line generation functions, so I rewrote them.
          They now can handle reversed x0/x1 and vertical lines.
         Added the main game loop.
         Added the --fps and --nummon flags.
         Added PC movement (it'll move randomly now).
         Tested for and fixed some destroy_character/game end memory leaks with Valgrind.

-- ASSIGNMENT 1.05 --
3/25:
    12p: Created basic structure for Assignment 1.05, including linking ncurses
          and a new game.c/game.h and 1_05.c.
         Added enums/constants for all the colors, symbols, and keybinds we're
          using. Moved character choices into the game renderer, the actual stored
          type ints are now arbitrary.
    2p:  Got basic ncurses rendering working -- the dungeon is now drawn to the
          screen properly with colors.
3/26:
    12p: Created the monster menu in its entirety. Dungeon still doesn't move.
          Includes some basic rendering macros, for centering text and such.
         Began the basic work to accept keybinds from the user. Can now toggle
          the monster menu and scroll up/down.
         Added the keybinds to move the PC around. It can now 'eat' the monsters,
          but the game won't end when they're all dead.
         Added back the turn system. The game now takes all the monsters' turns
          until the PC comes around, then redraws and requests the next input.
         Added in the win/lose screens, drawn with ASCII art stored in macros.h.
          When they show up, the user presses a key to exit.
         Moved some common macros to macros.h so they're not repeated.
         Implemented staircases, which reinitialize the dungeon and move the PC
          to the respective staircase in the new map that makes sense.
    4p:  Final testing.
          Fixed a bug in the map loader which only manifested with the new PC
           rendering system -- the loaded coordinates displayed (in the character
           struct only) incorrectly.
          Fixed an issue where using stairs in a loaded map had the potential to
           crash the game, since the room count matched exactly what the file
           specified though the configured random room count could be higher.
          Cleaned up some debugging stuff.
          Fixed some inconsistencies with the dungeon_init function which led
           to uninitialized PC values being used if the map was loaded, not
           generated.
          Memory leak fixes with Valgrind. This is a fair bit harder now since
           ncurses doesn't free everything. :(
           https://www.manpagez.com/man/3/exit_curses/

-- ASSIGNMENT 1.06 --
3/27:
    11p: Updated Makefile to use g++, and renamed all C files to .cpp.
         Added _t suffixes to all the types I made since it started complaining
          about conflicting names.
         Added type casts where requested, fixed other compilation errors.
         Switched the `mutable` flag over to an `attributes` int on cells, now
          with two attributes, IMMUTABLE and SEEN (for fog of war).
         Added fog of war. Whenever the PC moves, the cells in a 3 cell radius
          outside of the PC get the SEEN attribute marked. Only SEEN cells are
          rendered.
         General cleanup: moved variable declarations to the top of functions,
          made all error returns use RETURN_ERROR or ERROR_AND_EXIT macros,
          switched C standard library imports to C++ (ie, string.h -> cstring).
    4p:  Began migrating the dungeon_t struct to its own C++ class. Program is now
          very broken :)
3/28:
    12p: Decided to go all in on C++ stuff. Much of the program had to be changed, and
          the main refactor spanned quite a few hours. This included:
          - Making every struct a C++ class, and any struct that includes methods
             that operate on it members of that class
          - Getting rid of direct mallocs (where possible) for constructors/destructors
          - Replacing the print error/return status code pattern with exceptions
             -> This also allowed me to make methods return their values rather than
                 updating values of pointers where possible. For example, getting a
                 pair of coordinates will return coordinates_t rather than updating
                 an X and Y pointer.
          - Got rid of the files.cpp/h methods and moved them into dungeon.cpp/h -- they
             made way more sense there to begin with.
         Besides that, I did a few other refactors to improve the boundaries between
          source files/classes and make things easier to follow.
          - The dungeon code now exclusively handles dungeons, not characters or any
             of that extra stuff.
          - A new game_t class (in game.cpp/h) handles the game logic, and is where the
             dungeon generation and character management, turns, etc converge. Character
             maps, pathfinding, PC, etc. are all defined here. This required a signficant
             refactor of dungeon/file/game code.
          - Moved a lot of the game prep logic into game_t and out of main. Now, the init
             logic in main is just `new game_t` and `game.init_from_file()` or
             `game.init_random()`. Cleanup is also in the game destructor.
3/29:
    9a:  Continued the Great C++ Refactor. Began to move on to debugging the now very,
          very broken program.
          - Refactored heap.cpp/heap.c into a C++ class for consistency.
          - Began hunting some Valgrind uninitialized value errors and use of unallocated
             memory. Not much success yet.
3/30:
    11a: Got the game up and running again following the refactor and hunted down bugs.
          - Found a bug in the Fog of War implementation -- a typo, where an X should've
             been a Y, which made the dungeon blank sometimes.
          - Readded the PC speed definition, which was lost somewhere and resulted in lots
             of vague 'uninitialized value' complaints from Valgrind and made the monsters
             go warp speed.
          - Fixed a bug with Fog of War where using staircases would result in an empty
             dungeon for one turn.
          - Found and cleaned up some memory leaks introduced in the refactor. Got rid of
             some now unnecessary mallocs.
          - `nummon` implementation was redone with the new game_t class, and I forgot to
             actually set it if the user overrides it, so it does that now.
          - Fixed a bug in the monster menu implementation where a uint8_t was being used
             for possibly negative values, making the numbers wrap around to 255.
    3p:  Read over the requirements again and realized the SEEN attribute on cells was
          insufficient for the Fog of War requirement. It's now a map of cell types, where
          the default is CELL_TYPE_HIDDEN which is rendered as stone.
         Added the toggle key for Fog of War.
         Did some color work so that the "seen" cells that aren't immediately visible
          by the PC are rendered in grayscale to better reflect that they aren't the real
          cells.
         Implemented teleportation.
         Moved the game loop out of game.cpp into game_loop.cpp since it's getting long.
3/31:
    3p:  I had a random segfault while playtesting that I couldn't reproduce, so I created
          a script to run the game with random inputs over and over until a crash.
          Discovered and fixed two out-of-bounds reads caused by typos in character
          logic with it.
         The game now displays the final frame after win/lose.
         Teleportation now shows a message when killing a monster (was bugged).


-- ASSIGNMENT 1.07 --
4/3:
    11p:
         Made a new exception class, dungeon_exception, which is now used in place of
          std::runtime_error. It enables passing in the __PRETTY_FUNCTION__ macro and
          a causing exception, printing it all out nicely in what().
4/7:
    12p: Added basic assignment structure to Makefile, src/assignments, and readmes.
         Created a skeleton structure for parser.h, which is a templated class that
          operates on any class. The goal is to read from a list of config structs
          which define a name, data type, and offset within the generic class. The
          data will then be parsed given that type and set at the given offset.
    3p:  Completed first iteration of the parser, and tested with STRING, LONG_STRING,
          DICE, and INT.
         Added the basic dice_t class in dice.h. It just stores the 3 values.
         Tested against a simple monster declaration, fixed memory leaks.
    6p:  Completed monster parsing. With it, added COLOR and MONSTER_ATTRIBUTE types.
    9p:  Completed item parsing. With it, added ITEM_TYPE and BOOL types.
    10p: Cleaned up some extra imports everywhere and tested against full files.
4/9:
    7p:  Realized there were some issues relative to the spec:
         - Print format wasn't right
         - Duplicate keywords wouldn't error
         - Supposed to skip failed parses
         Also made it resilient to extra whitespace anywhere.

-- ASSIGNMENT 1.08 --
4/10:
    12p: Worked the item parsing code into the game class so the game runs again.
         Reworked monsters to new format and added basic item class.
         Updated commandline flags to allow passing paths for monster/item files.
4/14:
    6p:  (finally) Fully C++ified the binary heap class to make debugging easier.
         Created new random monster and item generation functions that use the definitions.
         Created an item map & enabled primitive (no colors yet) item rendering.
            -> Had to change the seen map to chars for this to work with fog of war.
4/15:
    4p:  Implemented inventory. The PC picks up items with the ',' key. It can hold up
          to 10 items (to fit with the carry slots coming up in 1.09). Monsters can
          hold infinite items. They drop them when they die.
         Implemented the GHOST attribute (I think it's actually called PASS, but GHOST is
          cooler)
         Made it so items can stack. Picking up an item removes the top one from the stack.
          Monsters grab the entire stack if they pick up/destroy one.
         Implemented PICKUP and DESTROY.
         Added item/monster colors, including multiple colors which cycle through every
          redraw.
         Remade the monster menu, which now allows the user to select a monster and displays
          its name, description, and attributes at the bottom of the screen. (not required,
          but seemed nice)
         Made the game end when a boss is killed. I think that was for 1.09, but oh well
         Fixed unique generation to match up with the spec (didn't work properly).

-- ASSIGNMENT 1.09 --
4/16:
    2p:  Added rendering for health and inventory at the bottom of the UI.
         Added equipment slots to the PC.
         Added equip, unequip, drop, and expunge commands.
4/17:
    12p: Created rendering methods for drawing the inventory, equipment,
          and item details to the screen (reused in all inventory controls).
4/18:
    10p:
         Added UI views to all the inventory-related prompts.
         Added an inventory menu, which works like the monster menu, allowing
          scrolling through the items along with entering hotkeys to select
          and view details. Bound to i and I, since this fulfills both of their
          specs.
4/22:
    1p:  Implemented new combat. Characters now have HP, and an attempt to move into
          their space will deal them damage. If a monster tries to move into another
          monster's cell, the old one is displaced.
         Added a message queue to allow multiple messages per turn (and easier use).
          This includes color formatting via string codes (&<num>, &b, &d, &r, &&).
         Applied item bonuses to the PC, which included implementing dodging.
         Made the game redraw every 500ms (to make the color switching clearer).
          Messages disappear automatically after 2500ms.
         Added a hotkey, ENTER, to clear the active message in the queue.
4/23:
    3p:  Fixed bugs with game not ending after PC/boss kill.
         Fixed a bug (and possible crash) with the monster displacement logic.
         Implemented monster look mode, which just opens the monster menu at the
          given monster's index.
         Added an alias 'e' (equipment) from the spec to the inventory menu,
          which already shows all that anyway.
         Fixed a long-standing bug with PC and character speed being incorrectly
          implemented.

-- ASSIGNMENT 2 --
4/26:
    11a: Began experimenting with sixel libraries. Settled on notcurses.
         Ripped out ncurses, new game_loop.cpp.
4/27:
    11a: Implemented a global logger. Notcurses blows up if we try to print while
          it's rendering, so this holds all messages in a queue until it exits
          and reprints them. Also adds log levels.
         Implemented a resource manager. It scans all of the textures in assets
          and loads exactly one Visual for rendering. Keeps memory to a minimum,
          since we don't have to load them multiple times.
         Created the new main game loop. Added textures, migrated everything
          that used ncurses, and made the game/healthbar/inventory render with
          sixel images. Lots of missing features still.