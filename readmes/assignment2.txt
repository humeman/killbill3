COMS 3270
Assignment 2
Kill Bill 3
---

This final assignment is an extension to the dungeon game: Kill Bill 3.
For context, I created Kill Bill 1 and 2 in two other classes (SE 186 and COMS 309). The series
 is completely unrelated to the movie of the same name and each of them have been some spin
 on a dungeon crawler at Michaelsoft H.Q. where a deranged Bill has gone crazy and decided to
 steal all of the world's computers for his malevolent purposes. The old ones were in Java,
 so nothing (including algorithms) got reused here.

There were quite a few major changes to accomplish this -- most of the codebase ended up getting
 partially or totally rewritten.

-- Sixel Graphics --
I wanted to draw actual graphics to the screen, and it turns out most terminal emulators let you
 draw pictures to the terminal with a special escape sequence. I ripped out ncurses in favor of
 Notcurses, which provides an API for this. Notcurses has very little in common with ncurses, so
 all of the rendering logic was done from scratch.

-- Sounds --
Sound effects are included now, done through SFML. They play in the intro sequence and for various
 in-game actions.

-- Map definitions --
Dungeons are still randomly generated, but are now stored in memory and built with a defined set
 of rules set in a config file (same parser format we used for objects/items). This allows custom
 maps to be built with different room sizes, enemies, items, and decorations. I used this to
 add 3 different game difficulties.

-- Decorations --
Decorations are defined with a decoration scheme in the map config, which defines what kind of room
 each room is (ie, lobby, server room, conference room, ...).

-- Interactive menus --
With the new rendering, I added a bunch of interactive menus. Inventory is operated entirely
 through that menu (ARROWS, ENTER = equip/unequip, SPACE = drop, BACKSPACE = expunge). Cheats, like
 teleport and look modes (and a bunch others I added) are in a new cheater menu (~).

-- New controls --
Completely remade the controls to fit with the other Kill Bill games.

-- Lots of other miscellaneous changes --
- Isometric walls around rooms/halls (this was way harder than I expected)
- New monsters and items
- New win and lose screen
- Inventory and health rendering at the bottom of the screen
- Forced progression (keycard required to go up, dropped when last monster dies)
- "Look mode" to unify monster menu/targeting mode/item menu, opens a pointer and renders info
    for anything the pointer is hovering over
- Many bugfixes and minor improvements


Implemented controls:
    PC Movement:
      w: up
      a: left
      s: down
      d: right
    Items:
      f: pick up
      e: open inventory menu
            arrows: select items
            enter: equip/unequip
            backspace: expunge
            space: drop
            e: close
            esc (twice): close 
    Cheater:
      `: launch cheater menu
            up/down arrows: select
            enter: toggle/use
            `: close
            esc (twice): close
      look/teleport mode:
            wasd: move
            enter: confirm
            esc (twice): cancel
    Main menu:
      up/down arrows: select
      enter: start
    General:
      Q: quit the game
      r: refresh rendering (unless there's a bug, this shouldn't be necessary)
      <enter>: dismiss the current status message

--- TO THE GRADERS ---
This assignment uses a library unavailable on Pyrite, notcurses. So that you guys can grade this,
 I spun up a local VM with Pyrite's OS version and compiled it, then made copies of all the
 libraries that I had to install and bundled them into a tar.gz. This version does not include 
 SFML since it needs way too many dependencies (and wouldn't work over SSH anyway), so there is
 no sound support with this version.

If you want to use that precompiled version with Pyrite, download it:
 - On Canvas, as senneff_camden.assignment-2-precompiled.tar.gz
 - On my website, https://files.csenneff.com/isu/senneff_camden.assignment-2-precompiled.tar.gz
 - It's big, 70MB. Sorry. Notcurses introduces a massive network of dependencies, and there are
    a lot of my own image/audio assets necessary for the game.
Extract it, then enter the senneff_camden.assignment-2-precompiled directory.
Run: LD_LIBRARY_PATH=lib:$LD_LIBRARY_PATH ./killbill3

You can, depending on what terminal you have, run Sixel graphics over SSH. If your terminal
 doesn't support that, though, it'll fall back to character pixels, which will look bad but
 is still playable. 

If you'd like to see how the game works with all features in place, watch the brief demo at
 https://www.youtube.com/watch?v=4tZ51IP53LU.

--- TO RUN ON ANYTHING OTHER THAN PYRITE ---
-- COMPILE --
    This requires notcurses (for graphics) and SFML (for audio) to compile.
        apt:  sudo apt install libnotcurses++-dev libsfml-dev
        brew: brew install notcurses sfml
        anything else: see https://repology.org/project/notcurses/versions
                           https://www.sfml-dev.org/tutorials/3.0/getting-started/linux/

    ** YOUR MILEAGE MAY VARY **
      For the best experience, use a terminal with Sixel graphics enabled (I use Tabby).
       The VSCode terminal can do this if you turn on terminal GPU acceleration and terminal images.
       It will fall back to regular character rendering if this isn't supported by your terminal,
        which works, but doesn't look good.

      If you have trouble with sound or don't want to hear anything, add the -q flag. Nothing sound-
       related will be loaded if specified.
      
    Run: make
    This will generate a `killbill3` binary.

Flags:
    -s, --skip: Skips the intro sequence.
    -d, --debug: Prints debug messages.
    -h, --help: Displays a help message.

Run:
    ./killbill3